definitions:
  entity.AuthResponse:
    properties:
      access_token:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
    type: object
  entity.Event:
    properties:
      create_date:
        type: string
      description:
        type: string
      eventOptions:
        items:
          $ref: '#/definitions/entity.EventOption'
        type: array
      id:
        type: string
      name:
        type: string
      owner_user:
        $ref: '#/definitions/entity.User'
      registered_users:
        items:
          $ref: '#/definitions/entity.User'
        type: array
      status:
        type: string
    required:
    - eventOptions
    - name
    type: object
  entity.EventOption:
    properties:
      date_time:
        type: string
      event_name:
        type: string
      id:
        type: string
      update_time:
        type: string
      vote_quantity:
        type: integer
    required:
    - date_time
    type: object
  entity.User:
    properties:
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.AuthResponse'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Login a user
      tags:
      - authentication
  /v1/auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Register a user
      tags:
      - authentication
  /v1/events:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Event'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.Event'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Event'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Create an event
      tags:
      - events
  /v1/events/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: event id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Event'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get event by id
      tags:
      - events
    patch:
      consumes:
      - application/json
      parameters:
      - description: event id
        in: path
        name: id
        required: true
        type: string
      - description: status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Event'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Change a event status
      tags:
      - events
  /v1/events/{id}/user:
    patch:
      consumes:
      - application/json
      parameters:
      - description: event id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Event'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Register a user to event
      tags:
      - events
  /v1/events/vote/{event_id}/options/{option_id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: event id
        in: path
        name: event_id
        required: true
        type: string
      - description: event option id
        in: path
        name: option_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Event'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Vote an event option
      tags:
      - events
securityDefinitions:
  Bearer:
    description: Description for what is this security definition being used
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
